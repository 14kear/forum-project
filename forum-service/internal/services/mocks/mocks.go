// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/forum/forum.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/14kear/forum-project/forum-service/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockTopicStorage is a mock of TopicStorage interface.
type MockTopicStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTopicStorageMockRecorder
}

// MockTopicStorageMockRecorder is the mock recorder for MockTopicStorage.
type MockTopicStorageMockRecorder struct {
	mock *MockTopicStorage
}

// NewMockTopicStorage creates a new mock instance.
func NewMockTopicStorage(ctrl *gomock.Controller) *MockTopicStorage {
	mock := &MockTopicStorage{ctrl: ctrl}
	mock.recorder = &MockTopicStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicStorage) EXPECT() *MockTopicStorageMockRecorder {
	return m.recorder
}

// DeleteTopic mocks base method.
func (m *MockTopicStorage) DeleteTopic(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopic", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopic indicates an expected call of DeleteTopic.
func (mr *MockTopicStorageMockRecorder) DeleteTopic(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopic", reflect.TypeOf((*MockTopicStorage)(nil).DeleteTopic), ctx, id)
}

// GetTopicAuthorID mocks base method.
func (m *MockTopicStorage) GetTopicAuthorID(ctx context.Context, id int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicAuthorID", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicAuthorID indicates an expected call of GetTopicAuthorID.
func (mr *MockTopicStorageMockRecorder) GetTopicAuthorID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicAuthorID", reflect.TypeOf((*MockTopicStorage)(nil).GetTopicAuthorID), ctx, id)
}

// SaveTopic mocks base method.
func (m *MockTopicStorage) SaveTopic(ctx context.Context, title, content string, userID int64, email string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTopic", ctx, title, content, userID, email)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTopic indicates an expected call of SaveTopic.
func (mr *MockTopicStorageMockRecorder) SaveTopic(ctx, title, content, userID, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTopic", reflect.TypeOf((*MockTopicStorage)(nil).SaveTopic), ctx, title, content, userID, email)
}

// TopicByID mocks base method.
func (m *MockTopicStorage) TopicByID(ctx context.Context, id int) (models.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicByID", ctx, id)
	ret0, _ := ret[0].(models.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopicByID indicates an expected call of TopicByID.
func (mr *MockTopicStorageMockRecorder) TopicByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicByID", reflect.TypeOf((*MockTopicStorage)(nil).TopicByID), ctx, id)
}

// Topics mocks base method.
func (m *MockTopicStorage) Topics(ctx context.Context) ([]models.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topics", ctx)
	ret0, _ := ret[0].([]models.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Topics indicates an expected call of Topics.
func (mr *MockTopicStorageMockRecorder) Topics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topics", reflect.TypeOf((*MockTopicStorage)(nil).Topics), ctx)
}

// MockCommentStorage is a mock of CommentStorage interface.
type MockCommentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCommentStorageMockRecorder
}

// MockCommentStorageMockRecorder is the mock recorder for MockCommentStorage.
type MockCommentStorageMockRecorder struct {
	mock *MockCommentStorage
}

// NewMockCommentStorage creates a new mock instance.
func NewMockCommentStorage(ctrl *gomock.Controller) *MockCommentStorage {
	mock := &MockCommentStorage{ctrl: ctrl}
	mock.recorder = &MockCommentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentStorage) EXPECT() *MockCommentStorageMockRecorder {
	return m.recorder
}

// CommentByID mocks base method.
func (m *MockCommentStorage) CommentByID(ctx context.Context, id, topicID int) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentByID", ctx, id, topicID)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentByID indicates an expected call of CommentByID.
func (mr *MockCommentStorageMockRecorder) CommentByID(ctx, id, topicID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentByID", reflect.TypeOf((*MockCommentStorage)(nil).CommentByID), ctx, id, topicID)
}

// CommentsByTopicID mocks base method.
func (m *MockCommentStorage) CommentsByTopicID(ctx context.Context, topicID int) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentsByTopicID", ctx, topicID)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentsByTopicID indicates an expected call of CommentsByTopicID.
func (mr *MockCommentStorageMockRecorder) CommentsByTopicID(ctx, topicID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentsByTopicID", reflect.TypeOf((*MockCommentStorage)(nil).CommentsByTopicID), ctx, topicID)
}

// DeleteComment mocks base method.
func (m *MockCommentStorage) DeleteComment(ctx context.Context, id, topicID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id, topicID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentStorageMockRecorder) DeleteComment(ctx, id, topicID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentStorage)(nil).DeleteComment), ctx, id, topicID)
}

// GetCommentAuthorID mocks base method.
func (m *MockCommentStorage) GetCommentAuthorID(ctx context.Context, id int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentAuthorID", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentAuthorID indicates an expected call of GetCommentAuthorID.
func (mr *MockCommentStorageMockRecorder) GetCommentAuthorID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentAuthorID", reflect.TypeOf((*MockCommentStorage)(nil).GetCommentAuthorID), ctx, id)
}

// SaveComment mocks base method.
func (m *MockCommentStorage) SaveComment(ctx context.Context, topicID int, userID int64, content, email string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveComment", ctx, topicID, userID, content, email)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveComment indicates an expected call of SaveComment.
func (mr *MockCommentStorageMockRecorder) SaveComment(ctx, topicID, userID, content, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveComment", reflect.TypeOf((*MockCommentStorage)(nil).SaveComment), ctx, topicID, userID, content, email)
}

// MockChatMessageStorage is a mock of ChatMessageStorage interface.
type MockChatMessageStorage struct {
	ctrl     *gomock.Controller
	recorder *MockChatMessageStorageMockRecorder
}

// MockChatMessageStorageMockRecorder is the mock recorder for MockChatMessageStorage.
type MockChatMessageStorageMockRecorder struct {
	mock *MockChatMessageStorage
}

// NewMockChatMessageStorage creates a new mock instance.
func NewMockChatMessageStorage(ctrl *gomock.Controller) *MockChatMessageStorage {
	mock := &MockChatMessageStorage{ctrl: ctrl}
	mock.recorder = &MockChatMessageStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatMessageStorage) EXPECT() *MockChatMessageStorageMockRecorder {
	return m.recorder
}

// ChatMessageByID mocks base method.
func (m *MockChatMessageStorage) ChatMessageByID(ctx context.Context, id int, userID int64) (models.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatMessageByID", ctx, id, userID)
	ret0, _ := ret[0].(models.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatMessageByID indicates an expected call of ChatMessageByID.
func (mr *MockChatMessageStorageMockRecorder) ChatMessageByID(ctx, id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatMessageByID", reflect.TypeOf((*MockChatMessageStorage)(nil).ChatMessageByID), ctx, id, userID)
}

// ChatMessages mocks base method.
func (m *MockChatMessageStorage) ChatMessages(ctx context.Context) ([]models.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatMessages", ctx)
	ret0, _ := ret[0].([]models.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatMessages indicates an expected call of ChatMessages.
func (mr *MockChatMessageStorageMockRecorder) ChatMessages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatMessages", reflect.TypeOf((*MockChatMessageStorage)(nil).ChatMessages), ctx)
}

// DeleteChatMessagesBefore mocks base method.
func (m *MockChatMessageStorage) DeleteChatMessagesBefore(ctx context.Context, before time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatMessagesBefore", ctx, before)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChatMessagesBefore indicates an expected call of DeleteChatMessagesBefore.
func (mr *MockChatMessageStorageMockRecorder) DeleteChatMessagesBefore(ctx, before interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatMessagesBefore", reflect.TypeOf((*MockChatMessageStorage)(nil).DeleteChatMessagesBefore), ctx, before)
}

// SaveChatMessage mocks base method.
func (m *MockChatMessageStorage) SaveChatMessage(ctx context.Context, userID int64, content, email string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveChatMessage", ctx, userID, content, email)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveChatMessage indicates an expected call of SaveChatMessage.
func (mr *MockChatMessageStorageMockRecorder) SaveChatMessage(ctx, userID, content, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveChatMessage", reflect.TypeOf((*MockChatMessageStorage)(nil).SaveChatMessage), ctx, userID, content, email)
}
