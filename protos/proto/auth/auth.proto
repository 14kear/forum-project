syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/http.proto";

package auth;

option go_package = "14kear.sso.v1;ssov1";

// Auth is service for managing permissions and roles.
service Auth {
  // Register registers a new user.
  rpc Register (RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/auth/register"
      body: "*"
    };
  }
  // Login logs in a user and returns an auth token.
  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/auth/login"
      body: "*"
    };
  }

  rpc IsAdmin(IsAdminRequest) returns (IsAdminResponse) {
    option (google.api.http) = {
      get: "/auth/admin/{user_id}"
    };
  }

  rpc RefreshTokens(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/auth/refresh"
      body: "*"
    };
  }

  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/auth/logout"
      body: "*"
    };
  }

  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
}

// Объект, который отправляется при вызове RPC-метода (ручки) Register.
message RegisterRequest {
  string email = 1; // Email of the user to register.
  string password = 2; // Password of the user to register.
}

// Объект, который метод (ручка) вернёт.
message RegisterResponse {
  int64 user_id = 1; // User ID of the registered user.
}

// То же самое для метода Login()
message LoginRequest {
  string email = 1; // Email of the user to login.
  string password = 2; // Password of the user to login.
  int32 app_id = 3; // ID of the app to login to.
}

message LoginResponse {
  string access_token = 1;  // Access JWT token
  string refresh_token = 2; // Refresh JWT token
}

message IsAdminRequest{
  int64 user_id = 1; // User ID to validate.
}

message IsAdminResponse{
  bool is_admin = 1; // Indicates whether the user is an admin.
}

// Запрос на обновление access токена
message RefreshTokenRequest {
  string refresh_token = 1;
  int32 app_id = 2;
}

message RefreshTokenResponse {
  string access_token = 1;
  string refresh_token = 2;
}

message LogoutRequest {
  string refresh_token = 1;
  int32 app_id = 2;
}

message LogoutResponse {
  string message = 1;
}

message ValidateTokenRequest {
  string access_token = 1;
  int32 app_id = 2;
}

message ValidateTokenResponse {
  int64 user_id = 1;
  bool is_valid = 2;
}